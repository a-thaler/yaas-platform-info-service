load_module modules/ngx_http_lua_module.so;
load_module modules/ngx_http_echo_module.so;
load_module modules/ngx_http_headers_more_filter_module.so;
load_module modules/ngx_http_geoip_module.so;

worker_processes  1;

error_log stderr debug; #notice;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    access_log /dev/stdout;

    keepalive_timeout  65;
    sendfile           on;
    gzip               on;

    # set search paths for pure Lua external libraries (';;' is the default path):
    #lua_package_path '/usr/lib/lua/5.1/?.lua;;';

    # set search paths for Lua external libraries written in C (can also use ';;'):
    #lua_package_cpath '/usr/lib/lua/5.1/?.so;;';

	geoip_country  /etc/nginx/geoip/GeoIP-Country.dat;
	geoip_city     /etc/nginx/geoip/GeoIP-City.dat;

    include        /var/nginx/config/timezone.conf;

    map $uri $basename {
        ~/(?<captured_basename>[^/]*)$ $captured_basename;
    }

    lua_shared_dict cache 5m;

    init_by_lua_block {
        cjson = require('cjson')
        cjson.decode_invalid_numbers(true)
        iconv = require('iconv')
        cd = iconv.new('utf-8','iso-8859-15')
    }

    server {
        listen      80;
        server_name localhost;
        root        /var/nginx;

	    set_real_ip_from  10.0.0.0/8;
        set_real_ip_from  127.0.0.1;
	    real_ip_header    X-Forwarded-For;
        real_ip_recursive on;

        add_header Cache-Control no-cache;
        add_header Access-Control-Allow-Origin *;
        charset utf-8;
        default_type 'application/json';

        location =/header {
            charset off;
            default_type text/plain;

            echo $echo_client_request_headers;
        }

        location =/test {
            charset off;
            default_type text/plain;

            set $base_url "${scheme}://${server_name}:${server_port}";
            echo $scheme $server_name $server_port $uri $request $base_url;
        }

        location ~/info/?(?<ip>.*) {
            if ($ip = "") {
                set $ip $remote_addr;
            }
            if ($ip !~ '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$') {
                return 400;
            }

            proxy_set_header X-Forwarded-For $ip;
            proxy_set_header Host $host;
            proxy_set_header X-Request-For $request;
            proxy_pass $scheme://127.0.0.1/info;
        }

        location =/info {

            if ( $http_x_request_for ) {
                access_log off;
            }

            content_by_lua_block {
                -- if we got an request parameter ip just capture the complex
                if ngx.var.arg_ip ~= nil then
                    local res = ngx.location.capture("/info/" .. ngx.var.arg_ip)
                    if res.status == 200 then
                        ngx.say(res.body)
                    end
                    ngx.exit(res.status)
                end

                function add_info(var, table, section, item)
                    if var ~=  nil and var ~= '' then
                        if table[section] == nil then
                            table[section] = {}
                        end
                        table[section][item] = cd:iconv(var)
                    end
                end

                function add_yaas_info(country, language, base_url)
                    local yaas_info = {
                        market = { id = country,
                                   link = base_url .. '/markets/de'
                                 },
                        language = language
                    }

                    return yaas_info
                end

                local info = {
                    ip = ngx.var.remote_addr
                }

                add_info(ngx.var.geoip_city_country_code, info, 'country', 'code')
                add_info(ngx.var.geoip_city_country_name, info, 'country', 'name')
                add_info(ngx.var.geoip_region_code,       info, 'region',  'code')
                add_info(ngx.var.geoip_region_name,       info, 'region',  'name')
                add_info(ngx.var.geoip_timezone,          info, 'region',  'timezone')
                add_info(ngx.var.geoip_city,              info, 'city',    'name')
                add_info(ngx.var.geoip_postal_code,       info, 'city',    'postal')

                -- Convert latitude and longitude to numeric values
                if ngx.var.geoip_latitude ~= nil and ngx.var.geoip_longitude ~= nil then
                    info['position'] = {
                        latitude  = tonumber(ngx.var.geoip_latitude),
                        longitude = tonumber(ngx.var.geoip_longitude)
                    }
                end

                info['yaas'] = add_yaas_info(ngx.var.geoip_city_country_code,
                                             ngx.req.get_headers()['Accept-Language'],
                                             ngx.req.get_headers()['Hybris-External-Url'])

                local json = cjson.encode(info)
                ngx.say(json)
            }
        }

        location =/regions {
            add_header Cache-Control "public";
            expires 1h;

            content_by_lua_block {
                local regions = ngx.shared.cache:get("regions")
                if regions == nil then
                    local res = ngx.location.capture("/data/regions")
                    if res.status ~= 200 then
                        ngx.exit(res.status)
                    end
                    local data = cjson.decode(res.body)
                    regions = cjson.encode(data.regions)
                    ngx.shared.cache:set("regions", regions, 3600)
                end
                ngx.say(regions)
            }
        }

        location /regions/ {
            add_header Cache-Control "public";
            expires 1h;

            content_by_lua_block {
                local continent = ngx.var.request_uri:match("^.+/(.+)$")
                local region = ngx.shared.cache:get("regions." .. continent)
                if region == nil then
                    local regions = ngx.shared.cache:get("regions")
                    if regions == nil then
                        local res = ngx.location.capture("/regions")
                        if res.status ~= 200 then
                            ngx.exit(res.status)
                        end
                        regions = res.body
                    end
                    local data = cjson.decode(regions)
                    if data[continent] == nil then
                        ngx.exit(404)
                    end
                    region = cjson.encode(data[continent])
                    ngx.shared.cache:set("market." .. continent, region, 3600)
                end
                ngx.say(region)
            }
        }

        location =/markets {
            add_header Cache-Control "public";
            expires 1h;

            content_by_lua_block {
                local markets = ngx.shared.cache:get("markets")
                if markets == nil then
                    local res = ngx.location.capture("/data/markets")
                    if res.status ~= 200 then
                        ngx.exit(res.status)
                    end
                    local data = cjson.decode(res.body)
                    markets = cjson.encode(data.markets)
                    ngx.shared.cache:set("markets", markets, 3600)
                end
                ngx.say(markets)
            }
        }

        location /markets/ {
            add_header Cache-Control "public";
            expires 1h;

            content_by_lua_block {
                local country = ngx.var.request_uri:match("^.+/(.+)$")
                local market = ngx.shared.cache:get("market." .. country)
                if market == nil then
                    local markets = ngx.shared.cache:get("markets")
                    if markets == nil then
                        local res = ngx.location.capture("/markets")
                        if res.status ~= 200 then
                            ngx.exit(res.status)
                        end
                        markets = res.body
                    end
                    local data = cjson.decode(markets)
                    if data[country] == nil then
                        ngx.exit(404)
                    end
                    market = cjson.encode(data[country])
                    ngx.shared.cache:set("market." .. country, market, 3600)
                end
                ngx.say(market)
            }
        }

        location /data/ {
            internal;
            try_files $uri $uri.json;
        }

        location /meta_data/ {
            add_header Cache-Control "public";
            expires 1h;
            default_type 'application/yaml';
            try_files /meta/$basename /meta/$basename.yaml;
        }

        location /meta_data/schemata/ {
            add_header Cache-Control "public";
            expires 1h;
            default_type 'application/json';
            try_files /meta/schemata/$basename /meta/schemata/$basename.json;
        }


#        error_page 403 404 405 @40x;
#        location @40x {
#            try_files /etc/nginx/data/yaas.json =405;
#        }
#        error_page 500 502 503 504 =500 @50x;
#        location @50x {
#            try_files 50x.json =500;
#        }
    }
}