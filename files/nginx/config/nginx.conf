load_module modules/ngx_http_lua_module.so;
load_module modules/ngx_http_echo_module.so;

worker_processes  1;

error_log stderr debug; #notice;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    access_log /dev/stdout;

    sendfile        on;

    keepalive_timeout  65;

    gzip  on;

    # set search paths for pure Lua external libraries (';;' is the default path):
    #lua_package_path '/usr/lib/lua/5.1/?.lua;;';

    # set search paths for Lua external libraries written in C (can also use ';;'):
    #lua_package_cpath '/usr/lib/lua/5.1/?.so;;';

    map $uri $basename {
        ~/(?<captured_basename>[^/]*)$ $captured_basename;
    }

    lua_shared_dict cache 5m;

    init_by_lua_block {
        cjson = require "cjson"
        cjson.decode_invalid_numbers(true)
    }

    server {
        listen      80;
        server_name localhost;
        root        /var/nginx;

        location =/regions {
            expires 1h;
            add_header Cache-Control "public";
            default_type 'application/json';

            content_by_lua_block {
                local regions = ngx.shared.cache:get("regions")
                if regions == nil then
                    local res = ngx.location.capture("/data/regions")
                    if res.status ~= 200 then
                        ngx.exit(res.status)
                    end
                    local data = cjson.decode(res.body)
                    regions = cjson.encode(data.regions)
                    ngx.shared.cache:set("regions", regions, 3600)
                end
                ngx.say(regions)
            }
        }

        location /regions/ {
            expires 1h;
            add_header Cache-Control "public";
            default_type 'application/json';

            content_by_lua_block {
                local continent = ngx.var.request_uri:match("^.+/(.+)$")
                local region = ngx.shared.cache:get("regions." .. continent)
                if region == nil then
                    local regions = ngx.shared.cache:get("regions")
                    if regions == nil then
                        local res = ngx.location.capture("/regions")
                        if res.status ~= 200 then
                            ngx.exit(res.status)
                        end
                        regions = res.body
                    end
                    local data = cjson.decode(regions)
                    if data[continent] == nil then
                        ngx.exit(404)
                    end
                    region = cjson.encode(data[continent])
                    ngx.shared.cache:set("market." .. continent, region, 3600)
                end
                ngx.say(region)
            }
        }

        location =/markets {
            expires 1h;
            add_header Cache-Control "public";
            default_type 'application/json';

            content_by_lua_block {
                local markets = ngx.shared.cache:get("markets")
                if markets == nil then
                    local res = ngx.location.capture("/data/markets")
                    if res.status ~= 200 then
                        ngx.exit(res.status)
                    end
                    local data = cjson.decode(res.body)
                    markets = cjson.encode(data.markets)
                    ngx.shared.cache:set("markets", markets, 3600)
                end
                ngx.say(markets)
            }
        }

        location /markets/ {
            expires 1h;
            add_header Cache-Control "public";
            default_type 'application/json';

            content_by_lua_block {
                local country = ngx.var.request_uri:match("^.+/(.+)$")
                local market = ngx.shared.cache:get("market." .. country)
                if market == nil then
                    local markets = ngx.shared.cache:get("markets")
                    if markets == nil then
                        local res = ngx.location.capture("/markets")
                        if res.status ~= 200 then
                            ngx.exit(res.status)
                        end
                        markets = res.body
                    end
                    local data = cjson.decode(markets)
                    if data[country] == nil then
                        ngx.exit(404)
                    end
                    market = cjson.encode(data[country])
                    ngx.shared.cache:set("market." .. country, market, 3600)
                end
                ngx.say(market)
            }
        }

        location /data/ {
            internal;
            try_files $uri $uri.json;
        }

        location /meta_data/ {
            expires 1h;
            add_header Cache-Control "public";
            default_type 'application/yaml';
            try_files /meta/$basename /meta/$basename.yaml;
        }

        location /meta_data/schemata/ {
            expires 1h;
            add_header Cache-Control "public";
            default_type 'application/json';
            try_files /meta/schemata/$basename /meta/schemata/$basename.json;
        }


#        error_page 403 404 405 @40x;
#        location @40x {
#            try_files /etc/nginx/data/yaas.json =405;
#        }
#        error_page 500 502 503 504 =500 @50x;
#        location @50x {
#            try_files 50x.json =500;
#        }
    }
}