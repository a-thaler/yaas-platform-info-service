#!/usr/bin/env sh

readonly VERSION='1.0.0'
readonly AUTHOR='Ralf Hofmann'
readonly CONTACT='<r.hofmann@sap.com>'

readonly GEOIP_BASE_URL='http://geolite.maxmind.com/download/geoip/database'
readonly GEOIP_DATA_COUNTRY='GeoLite2-Country.mmdb.gz'
readonly GEOIP_DATA_CITY='GeoLite2-City.mmdb.gz'

readonly GEOIP_MMDB_FILE='GeoIP-City.mmdb'
readonly GEOIP_MMDB_FOLDER="${DATA_FOLDER}"

###########################################################################
# main functionality of the script
###########################################################################
main()
{
  # initialize all global variables
  _initialize

  # Process command line arguments
  # Options followed by one colon indicate having required argument
  OPTSTR=$(getopt -o Fhv --long force,help,version -n "${SCRIPT_NAME}" -- "$@") || _usage
  eval set -- "$OPTSTR"
  while true ; do
    case "$1" in
      '-F'|'--force')   FORCE=1  ; shift ;;
      '-h'|'--help')    _help    ; exit  ;;
      '-v'|'--version') _version ; exit  ;;
      '--')             shift    ; break ;;
      *)                _usage           ;;
    esac
  done

  if [ $# -gt 1 ]; then
    _usage; _error_exit "too many command line parameter"
  fi

  local GEOIP_MMDB_PATH="${GEOIP_MMDB_FOLDER}/${GEOIP_MMDB_FILE}"
  if [ $# -eq 1 ]; then
    GEOIP_MMDB_PATH="$1"
    shift
  fi

  [ -d "$(dirname -- "${GEOIP_MMDB_PATH}")" ] || mkdir -p "$(dirname -- "${GEOIP_MMDB_PATH}")"

  provide_geoip_file "${GEOIP_MMDB_PATH}" "${FORCE:-0}"
}

provide_geoip_file()
{
  command -v curl >/dev/null 2>&1 || _error_exit "curl needs to be installed for downloading GeoIP data"

  local MMDB_FILE MMDB_FORCE MMDB_META MMDB_UID MMDB_GID MMDB_URL MMDB_TMP MMDB_TIME

  MMDB_FILE="$1"        # mmdb file path
  MMDB_FORCE="${2:-0}"  # flag to force mmdb update

  MMDB_META="${MMDB_FILE}"

  [ -f "${MMDB_META}" ] || MMDB_META="$(dirname -- "${MMDB_META}")"

  MMDB_UID="$(stat -c %u "${MMDB_META}")"
  MMDB_GID="$(stat -c %g "${MMDB_META}")"

  MMDB_URL="${GEOIP_BASE_URL}/${GEOIP_DATA_CITY}"
  if [ "${MMDB_FORCE}" -eq 0 ] && [ -f "${MMDB_FILE}" ] && [ "$(curl -kSLIs -z"${MMDB_FILE}" -w "%{http_code}" "${MMDB_URL}" | tail -1)" = "304" ]; then
    _message -s -i "GeoIP network database '${MMDB_FILE}' is already up-to-date..."
    return
  fi

  # shellcheck disable=SC2119
  MMDB_TMP="$(_make_temp)"."${GEOIP_DATA_CITY#*.}"

  _message -s -i "downloading GeoIP network database from url: '${MMDB_URL}'..."
  if curl -jkSLR -# "${MMDB_URL}" -o "${MMDB_TMP}"; then
    command -v gunzip >/dev/null 2>&1 || _error_exit "gunzip needs to be installed for downloading GeoIP data"
    MMDB_TIME="$(stat -c %Y "${MMDB_TMP}")" # save timestamp because gunzip is resetting it
    if gunzip "${MMDB_TMP}"; then
      mv -f "${MMDB_TMP%.*}" "${MMDB_FILE}"
      touch -d@"${MMDB_TIME}" "${MMDB_FILE}"
      chown "${MMDB_UID}":"${MMDB_GID}" "${MMDB_FILE}"
      chmod a+r "${MMDB_FILE}"
      _message -s -i "updated GeoIP network database '${MMDB_FILE}'"
    else
      _error_exit "failed to decompress GeoIP data file"
    fi
  else
    _error_exit "failed to download GeoIP data from url: '${MMDB_URL}'"
  fi
}

###########################################################################
# customized functions
###########################################################################
_usage() {
	printf >&2 'usage: %s [-h|--help] [-v|--version] [-F|--force] [<mmdb file>]\n' "${SCRIPT_NAME}" && exit 1
}

_help() {
cat <<- -EOF-

  ${SCRIPT_NAME} Version ${VERSION}
  by ${AUTHOR} ${CONTACT}

  Simple script to automate the udpate maxmid GeoIP database files

  ${SCRIPT_NAME} [-h|--help] [-v|--version] [-f|--force] [<mmdb file>]

    <mmdb file>  mmdb database as full path [${GEOIP_MMDB_FOLDER}/GEOIP_MMDB_FILE]

  Options:

    -h, --help      Display this help message and exit.
    -v, --version   Display version and exit.
    -F, --force     Force update of the database.

-EOF-
}

###########################################################################
# utility functions
###########################################################################
_version() {
  _message -s -f "Version %s by %s %s\n" "${VERSION}" "${AUTHOR}" "${CONTACT}"
}

_initialize()
{
  set -o nounset -o errexit -eo pipefail; [ -n "${TRACE:-}" ] && set -x

  # Set file creation mask so that all files are created with 600 permissions.
  # This will help protect temp files.
  umask 066

  # the full qualified path of the script
  # shellcheck disable=SC2034
  SCRIPT_PATH=$(dirname -- "$($(command -v greadlink || command -v readlink) -f "$0")")
  SCRIPT_NAME=$(basename -- "$0")
  TMP_FOLDER="${TMPDIR:-/tmp/$(id -u)}/${SCRIPT_NAME}-$$"

  # make sure temp folder exists
  [ -d "${TMP_FOLDER}" ] || mkdir -p "${TMP_FOLDER}"

  # verbose level
  VERBOSE=${VERBOSE:-0}

  # Trap TERM, HUP, and INT signals and properly exit
  trap -- '__exit_handler' EXIT
  trap -- '__terminate_handler' TERM HUP
  trap -- '__abort_handler' INT
}

_message()
{
  local IDNX CATG LEN FMT TXT_IDNX TXT_CATG TXT_PRFX TXT_MSG LEN_PRFX=0

  while [ $# -gt 0 ]; do
    case $1 in
      -s ) IDNX="${SCRIPT_NAME}"; shift ;;
      -e ) CATG='ERROR'         ; shift ;;
      -w ) CATG='WARNING'       ; shift ;;
      -i ) CATG='INFO'          ; shift ;;
      -f ) FMT=$2 ; shift       ; shift ;;
      -- ) break                ; shift ;;
      * )  break                          ;;
    esac
  done

  if [ -n "${IDNX:-}" ]; then
    TXT_IDNX="$(printf '%s - ' "$IDNX")"
#    LEN_PRFX=$(expr ${#IDNX} + 3)
    LEN_PRFX=$((${#IDNX} + 3))
    TXT_PRFX="$TXT_IDNX"
  fi
  if [ -n "${CATG:-}" ]; then
    TXT_CATG="$(printf '%s: ' "$CATG")"
#    LEN_PRFX=$(expr ${#CATG} + 2)
    LEN_PRFX=$((${#CATG} + 2))
    TXT_PRFX="${TXT_PRFX:-}$TXT_CATG"
  fi

  # check if we should indent
  [ "${LEN:-0}" -lt $LEN_PRFX ] || LEN_PRFX=${LEN:-0}

  # format the output using the format string or default
  # shellcheck disable=SC2059
  if [ -n "${FMT:-}" ]; then
    if [ $# -eq 0 ] || ([ $# -eq 1 ] && [ "$1" = '-' ]); then
      TXT_MSG="$(printf "${FMT}" "$(cat -)")"
    else
      TXT_MSG="$(printf "${FMT}" "$@")"
    fi
  else
    if [ $# -eq 0 ] || ([ $# -eq 1 ] && [ "$1" = '-' ]); then
      TXT_MSG="$(cat -)"
    else
      TXT_MSG="$(printf "$@")"
    fi
  fi

  printf '%*s%s\n' "$LEN_PRFX" "${TXT_PRFX:-}" "$TXT_MSG"
}

# shellcheck disable=SC2120
_indent()
{
  local INDENT='    '

  if [ $# -eq 0 ] || ([ $# -eq 1 ] && [ "$1" = '-' ]); then
    sed -e "s/^/${INDENT}/g"
  else
    # shellcheck disable=SC2001
    echo "$@" | sed -e "s/^/${INDENT}/g"
  fi
}

#
# returns lowercase string
#
# shellcheck disable=SC2120
_tolower()
{
  if [ $# -eq 0 ] || ([ $# -eq 1 ] && [ "$1" = '-' ]); then
    tr '[:upper:]' '[:lower:]'
  else
    echo "$@" | tr '[:upper:]' '[:lower:]'
  fi
}

#
# returns uppercase string
#
# shellcheck disable=SC2120
_toupper()
{
  if [ $# -eq 0 ] || ([ $# -eq 1 ] && [ "$1" = '-' ]); then
    tr '[:lower:]' '[:upper:]'
  else
    echo "$@" | tr '[:lower:]' '[:upper:]'
  fi
}

#
# Trims any leading and trailing tabs or spaces
#
# shellcheck disable=SC2120
_trim()
{
  # local VAR="$@"
  # VAR="${VAR#"${VAR%%[![:space:]]*}"}" # remove leading whitespace characters
  # VAR="${VAR%"${VAR##*[![:space:]]}"}" # remove trailing whitespace characters
  # echo "${VAR}"

  if [ $# -eq 0 ] || ([ $# -eq 1 ] && [ "$1" = '-' ]); then
    sed -e 's/^[[:space:]]*//;s/[[:space:]]*$//'
  else
    echo "$@" | sed -e 's/^[[:space:]]*//;s/[[:space:]]*$//'
  fi
}

_time_stamp()
{
  #####
  # Function for outputting a time stamp
  # No arguments
  #####

  date -u +%Y-%m-%dT%H:%M:%S%z
}

_error_exit()
{
  #####
  # Function for exit due to fatal program error
  # Accepts 1 argument:
  #   - string containing descriptive error message
  #####
  local MESSAGE

  if [ "${1:-}" = '-' ]; then
    MESSAGE="$(cat -)"
  else
    MESSAGE="${1:-}"
  fi

  _message -s -e "${MESSAGE:-Unknown Error}"  >&2

  exit "${2:-1}"
}

__exit_handler()
{
  #####
  # Function to perform action on script exit
  # No arguments
  #####

  __do_cleanup
}

__terminate_handler()
{
  #####
  # Function to perform exit if termination signal is trapped
  # No arguments
  #####

  _message -s -w "Terminated" >&2

  exit
}

__abort_handler()
{
  #####
  # Function to perform exit if interrupt signal is trapped
  # No arguments
  #####

  _message -s -w "Aborted by user" >&2

  exit
}

__do_cleanup()
{
  #####
  # Function to remove temporary files and other housekeeping
  # No arguments
  #####

  # remove the temp folder
  [ "${VERBOSE:-0}" -lt 3 ] && [ -d "${TMP_FOLDER}" ] && \
    (rm -rf "${TMP_FOLDER}" >/dev/null 2>&1 || :)

  return 0
}

# shellcheck disable=SC2120
_make_temp()
{
  local TMPMASK="${1:-${SCRIPT_NAME}-XXXXXX}"

  mktemp -p "${TMP_FOLDER}" "${TMPMASK}"
}

###########################################################################
# Execution starts here
###########################################################################
main "$@"
